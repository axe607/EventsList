//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventsListData.EventService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventDto", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.Dto")]
    [System.SerializableAttribute()]
    public partial class EventDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AddressIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OrganizerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AddressId {
            get {
                return this.AddressIdField;
            }
            set {
                if ((this.AddressIdField.Equals(value) != true)) {
                    this.AddressIdField = value;
                    this.RaisePropertyChanged("AddressId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageUrl {
            get {
                return this.ImageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageUrlField, value) != true)) {
                    this.ImageUrlField = value;
                    this.RaisePropertyChanged("ImageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OrganizerId {
            get {
                return this.OrganizerIdField;
            }
            set {
                if ((this.OrganizerIdField.Equals(value) != true)) {
                    this.OrganizerIdField = value;
                    this.RaisePropertyChanged("OrganizerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.DtoExc" +
        "eptions")]
    [System.SerializableAttribute()]
    public partial class ServiceFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventDetailDto", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.Dto")]
    [System.SerializableAttribute()]
    public partial class EventDetailDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EventsListData.EventService.EmailDto[] OrganizerEmailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrganizerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EventsListData.EventService.PhoneDto[] OrganizerPhonesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventName {
            get {
                return this.EventNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EventNameField, value) != true)) {
                    this.EventNameField = value;
                    this.RaisePropertyChanged("EventName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageUrl {
            get {
                return this.ImageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageUrlField, value) != true)) {
                    this.ImageUrlField = value;
                    this.RaisePropertyChanged("ImageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EventsListData.EventService.EmailDto[] OrganizerEmails {
            get {
                return this.OrganizerEmailsField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizerEmailsField, value) != true)) {
                    this.OrganizerEmailsField = value;
                    this.RaisePropertyChanged("OrganizerEmails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrganizerName {
            get {
                return this.OrganizerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizerNameField, value) != true)) {
                    this.OrganizerNameField = value;
                    this.RaisePropertyChanged("OrganizerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EventsListData.EventService.PhoneDto[] OrganizerPhones {
            get {
                return this.OrganizerPhonesField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizerPhonesField, value) != true)) {
                    this.OrganizerPhonesField = value;
                    this.RaisePropertyChanged("OrganizerPhones");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmailDto", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.Dto")]
    [System.SerializableAttribute()]
    public partial class EmailDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrganizerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrganizerId {
            get {
                return this.OrganizerIdField;
            }
            set {
                if ((this.OrganizerIdField.Equals(value) != true)) {
                    this.OrganizerIdField = value;
                    this.RaisePropertyChanged("OrganizerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PhoneDto", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.Dto")]
    [System.SerializableAttribute()]
    public partial class PhoneDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrganizerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrganizerId {
            get {
                return this.OrganizerIdField;
            }
            set {
                if ((this.OrganizerIdField.Equals(value) != true)) {
                    this.OrganizerIdField = value;
                    this.RaisePropertyChanged("OrganizerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CategoryDto", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.Dto")]
    [System.SerializableAttribute()]
    public partial class CategoryDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Pid {
            get {
                return this.PidField;
            }
            set {
                if ((this.PidField.Equals(value) != true)) {
                    this.PidField = value;
                    this.RaisePropertyChanged("Pid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddressDto", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.Dto")]
    [System.SerializableAttribute()]
    public partial class AddressDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDto", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.Dto")]
    [System.SerializableAttribute()]
    public partial class UserDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EventsListData.EventService.EmailDto[] OrganizerEmailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrganizerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EventsListData.EventService.PhoneDto[] OrganizerPhonesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EventsListData.EventService.RoleDto[] UserRolesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EventsListData.EventService.EmailDto[] OrganizerEmails {
            get {
                return this.OrganizerEmailsField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizerEmailsField, value) != true)) {
                    this.OrganizerEmailsField = value;
                    this.RaisePropertyChanged("OrganizerEmails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrganizerName {
            get {
                return this.OrganizerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizerNameField, value) != true)) {
                    this.OrganizerNameField = value;
                    this.RaisePropertyChanged("OrganizerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EventsListData.EventService.PhoneDto[] OrganizerPhones {
            get {
                return this.OrganizerPhonesField;
            }
            set {
                if ((object.ReferenceEquals(this.OrganizerPhonesField, value) != true)) {
                    this.OrganizerPhonesField = value;
                    this.RaisePropertyChanged("OrganizerPhones");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EventsListData.EventService.RoleDto[] UserRoles {
            get {
                return this.UserRolesField;
            }
            set {
                if ((object.ReferenceEquals(this.UserRolesField, value) != true)) {
                    this.UserRolesField = value;
                    this.RaisePropertyChanged("UserRoles");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoleDto", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.Dto")]
    [System.SerializableAttribute()]
    public partial class RoleDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RoleName {
            get {
                return this.RoleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleNameField, value) != true)) {
                    this.RoleNameField = value;
                    this.RaisePropertyChanged("RoleName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EventService.IGet")]
    public interface IGet {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetEvents", ReplyAction="http://tempuri.org/IGet/GetEventsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EventsListData.EventService.ServiceFault), Action="http://tempuri.org/IGet/GetEventsServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.DtoExc" +
            "eptions")]
        EventsListData.EventService.EventDto[] GetEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetEvents", ReplyAction="http://tempuri.org/IGet/GetEventsResponse")]
        System.Threading.Tasks.Task<EventsListData.EventService.EventDto[]> GetEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetEventsByCategoryId", ReplyAction="http://tempuri.org/IGet/GetEventsByCategoryIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EventsListData.EventService.ServiceFault), Action="http://tempuri.org/IGet/GetEventsByCategoryIdServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.DtoExc" +
            "eptions")]
        EventsListData.EventService.EventDto[] GetEventsByCategoryId(int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetEventsByCategoryId", ReplyAction="http://tempuri.org/IGet/GetEventsByCategoryIdResponse")]
        System.Threading.Tasks.Task<EventsListData.EventService.EventDto[]> GetEventsByCategoryIdAsync(int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetEventsByUserId", ReplyAction="http://tempuri.org/IGet/GetEventsByUserIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EventsListData.EventService.ServiceFault), Action="http://tempuri.org/IGet/GetEventsByUserIdServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.DtoExc" +
            "eptions")]
        EventsListData.EventService.EventDto[] GetEventsByUserId(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetEventsByUserId", ReplyAction="http://tempuri.org/IGet/GetEventsByUserIdResponse")]
        System.Threading.Tasks.Task<EventsListData.EventService.EventDto[]> GetEventsByUserIdAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetEventInfoDetailById", ReplyAction="http://tempuri.org/IGet/GetEventInfoDetailByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EventsListData.EventService.ServiceFault), Action="http://tempuri.org/IGet/GetEventInfoDetailByIdServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.DtoExc" +
            "eptions")]
        EventsListData.EventService.EventDetailDto GetEventInfoDetailById(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetEventInfoDetailById", ReplyAction="http://tempuri.org/IGet/GetEventInfoDetailByIdResponse")]
        System.Threading.Tasks.Task<EventsListData.EventService.EventDetailDto> GetEventInfoDetailByIdAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetEventById", ReplyAction="http://tempuri.org/IGet/GetEventByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EventsListData.EventService.ServiceFault), Action="http://tempuri.org/IGet/GetEventByIdServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.DtoExc" +
            "eptions")]
        EventsListData.EventService.EventDto GetEventById(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetEventById", ReplyAction="http://tempuri.org/IGet/GetEventByIdResponse")]
        System.Threading.Tasks.Task<EventsListData.EventService.EventDto> GetEventByIdAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetEventsBySearchData", ReplyAction="http://tempuri.org/IGet/GetEventsBySearchDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EventsListData.EventService.ServiceFault), Action="http://tempuri.org/IGet/GetEventsBySearchDataServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.DtoExc" +
            "eptions")]
        EventsListData.EventService.EventDto[] GetEventsBySearchData(System.Nullable<int> categoryId, System.Nullable<System.DateTime> date, System.Nullable<int> state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetEventsBySearchData", ReplyAction="http://tempuri.org/IGet/GetEventsBySearchDataResponse")]
        System.Threading.Tasks.Task<EventsListData.EventService.EventDto[]> GetEventsBySearchDataAsync(System.Nullable<int> categoryId, System.Nullable<System.DateTime> date, System.Nullable<int> state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetCategories", ReplyAction="http://tempuri.org/IGet/GetCategoriesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EventsListData.EventService.ServiceFault), Action="http://tempuri.org/IGet/GetCategoriesServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.DtoExc" +
            "eptions")]
        EventsListData.EventService.CategoryDto[] GetCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetCategories", ReplyAction="http://tempuri.org/IGet/GetCategoriesResponse")]
        System.Threading.Tasks.Task<EventsListData.EventService.CategoryDto[]> GetCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetCategoryById", ReplyAction="http://tempuri.org/IGet/GetCategoryByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EventsListData.EventService.ServiceFault), Action="http://tempuri.org/IGet/GetCategoryByIdServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.DtoExc" +
            "eptions")]
        EventsListData.EventService.CategoryDto GetCategoryById(int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetCategoryById", ReplyAction="http://tempuri.org/IGet/GetCategoryByIdResponse")]
        System.Threading.Tasks.Task<EventsListData.EventService.CategoryDto> GetCategoryByIdAsync(int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetAddresses", ReplyAction="http://tempuri.org/IGet/GetAddressesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EventsListData.EventService.ServiceFault), Action="http://tempuri.org/IGet/GetAddressesServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.DtoExc" +
            "eptions")]
        EventsListData.EventService.AddressDto[] GetAddresses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetAddresses", ReplyAction="http://tempuri.org/IGet/GetAddressesResponse")]
        System.Threading.Tasks.Task<EventsListData.EventService.AddressDto[]> GetAddressesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetAddressById", ReplyAction="http://tempuri.org/IGet/GetAddressByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EventsListData.EventService.ServiceFault), Action="http://tempuri.org/IGet/GetAddressByIdServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.DtoExc" +
            "eptions")]
        EventsListData.EventService.AddressDto GetAddressById(int addressId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetAddressById", ReplyAction="http://tempuri.org/IGet/GetAddressByIdResponse")]
        System.Threading.Tasks.Task<EventsListData.EventService.AddressDto> GetAddressByIdAsync(int addressId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetEmailsByOrganizerId", ReplyAction="http://tempuri.org/IGet/GetEmailsByOrganizerIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EventsListData.EventService.ServiceFault), Action="http://tempuri.org/IGet/GetEmailsByOrganizerIdServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.DtoExc" +
            "eptions")]
        EventsListData.EventService.EmailDto[] GetEmailsByOrganizerId(int organizerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetEmailsByOrganizerId", ReplyAction="http://tempuri.org/IGet/GetEmailsByOrganizerIdResponse")]
        System.Threading.Tasks.Task<EventsListData.EventService.EmailDto[]> GetEmailsByOrganizerIdAsync(int organizerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetPhonesByOrganizerId", ReplyAction="http://tempuri.org/IGet/GetPhonesByOrganizerIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EventsListData.EventService.ServiceFault), Action="http://tempuri.org/IGet/GetPhonesByOrganizerIdServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.DtoExc" +
            "eptions")]
        EventsListData.EventService.PhoneDto[] GetPhonesByOrganizerId(int organizerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetPhonesByOrganizerId", ReplyAction="http://tempuri.org/IGet/GetPhonesByOrganizerIdResponse")]
        System.Threading.Tasks.Task<EventsListData.EventService.PhoneDto[]> GetPhonesByOrganizerIdAsync(int organizerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetUsers", ReplyAction="http://tempuri.org/IGet/GetUsersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EventsListData.EventService.ServiceFault), Action="http://tempuri.org/IGet/GetUsersServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.DtoExc" +
            "eptions")]
        EventsListData.EventService.UserDto[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetUsers", ReplyAction="http://tempuri.org/IGet/GetUsersResponse")]
        System.Threading.Tasks.Task<EventsListData.EventService.UserDto[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetUserByName", ReplyAction="http://tempuri.org/IGet/GetUserByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EventsListData.EventService.ServiceFault), Action="http://tempuri.org/IGet/GetUserByNameServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.DtoExc" +
            "eptions")]
        EventsListData.EventService.UserDto GetUserByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetUserByName", ReplyAction="http://tempuri.org/IGet/GetUserByNameResponse")]
        System.Threading.Tasks.Task<EventsListData.EventService.UserDto> GetUserByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetRolesNotInUser", ReplyAction="http://tempuri.org/IGet/GetRolesNotInUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EventsListData.EventService.ServiceFault), Action="http://tempuri.org/IGet/GetRolesNotInUserServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.DtoExc" +
            "eptions")]
        EventsListData.EventService.RoleDto[] GetRolesNotInUser(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetRolesNotInUser", ReplyAction="http://tempuri.org/IGet/GetRolesNotInUserResponse")]
        System.Threading.Tasks.Task<EventsListData.EventService.RoleDto[]> GetRolesNotInUserAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetRoles", ReplyAction="http://tempuri.org/IGet/GetRolesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EventsListData.EventService.ServiceFault), Action="http://tempuri.org/IGet/GetRolesServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.DtoExc" +
            "eptions")]
        EventsListData.EventService.RoleDto[] GetRoles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetRoles", ReplyAction="http://tempuri.org/IGet/GetRolesResponse")]
        System.Threading.Tasks.Task<EventsListData.EventService.RoleDto[]> GetRolesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetRolesById", ReplyAction="http://tempuri.org/IGet/GetRolesByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(EventsListData.EventService.ServiceFault), Action="http://tempuri.org/IGet/GetRolesByIdServiceFaultFault", Name="ServiceFault", Namespace="http://schemas.datacontract.org/2004/07/EventsListService.Contracts.Models.DtoExc" +
            "eptions")]
        EventsListData.EventService.RoleDto GetRolesById(int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/GetRolesById", ReplyAction="http://tempuri.org/IGet/GetRolesByIdResponse")]
        System.Threading.Tasks.Task<EventsListData.EventService.RoleDto> GetRolesByIdAsync(int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/IsValidUser", ReplyAction="http://tempuri.org/IGet/IsValidUserResponse")]
        bool IsValidUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/IsValidUser", ReplyAction="http://tempuri.org/IGet/IsValidUserResponse")]
        System.Threading.Tasks.Task<bool> IsValidUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/IsUserNameFreeForUserId", ReplyAction="http://tempuri.org/IGet/IsUserNameFreeForUserIdResponse")]
        bool IsUserNameFreeForUserId(int userId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/IsUserNameFreeForUserId", ReplyAction="http://tempuri.org/IGet/IsUserNameFreeForUserIdResponse")]
        System.Threading.Tasks.Task<bool> IsUserNameFreeForUserIdAsync(int userId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/IsUserNameFree", ReplyAction="http://tempuri.org/IGet/IsUserNameFreeResponse")]
        bool IsUserNameFree(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/IsUserNameFree", ReplyAction="http://tempuri.org/IGet/IsUserNameFreeResponse")]
        System.Threading.Tasks.Task<bool> IsUserNameFreeAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/IsRoleNameFree", ReplyAction="http://tempuri.org/IGet/IsRoleNameFreeResponse")]
        bool IsRoleNameFree(System.Nullable<int> roleId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGet/IsRoleNameFree", ReplyAction="http://tempuri.org/IGet/IsRoleNameFreeResponse")]
        System.Threading.Tasks.Task<bool> IsRoleNameFreeAsync(System.Nullable<int> roleId, string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGetChannel : EventsListData.EventService.IGet, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetClient : System.ServiceModel.ClientBase<EventsListData.EventService.IGet>, EventsListData.EventService.IGet {
        
        public GetClient() {
        }
        
        public GetClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GetClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GetClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GetClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public EventsListData.EventService.EventDto[] GetEvents() {
            return base.Channel.GetEvents();
        }
        
        public System.Threading.Tasks.Task<EventsListData.EventService.EventDto[]> GetEventsAsync() {
            return base.Channel.GetEventsAsync();
        }
        
        public EventsListData.EventService.EventDto[] GetEventsByCategoryId(int categoryId) {
            return base.Channel.GetEventsByCategoryId(categoryId);
        }
        
        public System.Threading.Tasks.Task<EventsListData.EventService.EventDto[]> GetEventsByCategoryIdAsync(int categoryId) {
            return base.Channel.GetEventsByCategoryIdAsync(categoryId);
        }
        
        public EventsListData.EventService.EventDto[] GetEventsByUserId(int userId) {
            return base.Channel.GetEventsByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<EventsListData.EventService.EventDto[]> GetEventsByUserIdAsync(int userId) {
            return base.Channel.GetEventsByUserIdAsync(userId);
        }
        
        public EventsListData.EventService.EventDetailDto GetEventInfoDetailById(int eventId) {
            return base.Channel.GetEventInfoDetailById(eventId);
        }
        
        public System.Threading.Tasks.Task<EventsListData.EventService.EventDetailDto> GetEventInfoDetailByIdAsync(int eventId) {
            return base.Channel.GetEventInfoDetailByIdAsync(eventId);
        }
        
        public EventsListData.EventService.EventDto GetEventById(int eventId) {
            return base.Channel.GetEventById(eventId);
        }
        
        public System.Threading.Tasks.Task<EventsListData.EventService.EventDto> GetEventByIdAsync(int eventId) {
            return base.Channel.GetEventByIdAsync(eventId);
        }
        
        public EventsListData.EventService.EventDto[] GetEventsBySearchData(System.Nullable<int> categoryId, System.Nullable<System.DateTime> date, System.Nullable<int> state) {
            return base.Channel.GetEventsBySearchData(categoryId, date, state);
        }
        
        public System.Threading.Tasks.Task<EventsListData.EventService.EventDto[]> GetEventsBySearchDataAsync(System.Nullable<int> categoryId, System.Nullable<System.DateTime> date, System.Nullable<int> state) {
            return base.Channel.GetEventsBySearchDataAsync(categoryId, date, state);
        }
        
        public EventsListData.EventService.CategoryDto[] GetCategories() {
            return base.Channel.GetCategories();
        }
        
        public System.Threading.Tasks.Task<EventsListData.EventService.CategoryDto[]> GetCategoriesAsync() {
            return base.Channel.GetCategoriesAsync();
        }
        
        public EventsListData.EventService.CategoryDto GetCategoryById(int categoryId) {
            return base.Channel.GetCategoryById(categoryId);
        }
        
        public System.Threading.Tasks.Task<EventsListData.EventService.CategoryDto> GetCategoryByIdAsync(int categoryId) {
            return base.Channel.GetCategoryByIdAsync(categoryId);
        }
        
        public EventsListData.EventService.AddressDto[] GetAddresses() {
            return base.Channel.GetAddresses();
        }
        
        public System.Threading.Tasks.Task<EventsListData.EventService.AddressDto[]> GetAddressesAsync() {
            return base.Channel.GetAddressesAsync();
        }
        
        public EventsListData.EventService.AddressDto GetAddressById(int addressId) {
            return base.Channel.GetAddressById(addressId);
        }
        
        public System.Threading.Tasks.Task<EventsListData.EventService.AddressDto> GetAddressByIdAsync(int addressId) {
            return base.Channel.GetAddressByIdAsync(addressId);
        }
        
        public EventsListData.EventService.EmailDto[] GetEmailsByOrganizerId(int organizerId) {
            return base.Channel.GetEmailsByOrganizerId(organizerId);
        }
        
        public System.Threading.Tasks.Task<EventsListData.EventService.EmailDto[]> GetEmailsByOrganizerIdAsync(int organizerId) {
            return base.Channel.GetEmailsByOrganizerIdAsync(organizerId);
        }
        
        public EventsListData.EventService.PhoneDto[] GetPhonesByOrganizerId(int organizerId) {
            return base.Channel.GetPhonesByOrganizerId(organizerId);
        }
        
        public System.Threading.Tasks.Task<EventsListData.EventService.PhoneDto[]> GetPhonesByOrganizerIdAsync(int organizerId) {
            return base.Channel.GetPhonesByOrganizerIdAsync(organizerId);
        }
        
        public EventsListData.EventService.UserDto[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<EventsListData.EventService.UserDto[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public EventsListData.EventService.UserDto GetUserByName(string name) {
            return base.Channel.GetUserByName(name);
        }
        
        public System.Threading.Tasks.Task<EventsListData.EventService.UserDto> GetUserByNameAsync(string name) {
            return base.Channel.GetUserByNameAsync(name);
        }
        
        public EventsListData.EventService.RoleDto[] GetRolesNotInUser(string userName) {
            return base.Channel.GetRolesNotInUser(userName);
        }
        
        public System.Threading.Tasks.Task<EventsListData.EventService.RoleDto[]> GetRolesNotInUserAsync(string userName) {
            return base.Channel.GetRolesNotInUserAsync(userName);
        }
        
        public EventsListData.EventService.RoleDto[] GetRoles() {
            return base.Channel.GetRoles();
        }
        
        public System.Threading.Tasks.Task<EventsListData.EventService.RoleDto[]> GetRolesAsync() {
            return base.Channel.GetRolesAsync();
        }
        
        public EventsListData.EventService.RoleDto GetRolesById(int roleId) {
            return base.Channel.GetRolesById(roleId);
        }
        
        public System.Threading.Tasks.Task<EventsListData.EventService.RoleDto> GetRolesByIdAsync(int roleId) {
            return base.Channel.GetRolesByIdAsync(roleId);
        }
        
        public bool IsValidUser(string username, string password) {
            return base.Channel.IsValidUser(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> IsValidUserAsync(string username, string password) {
            return base.Channel.IsValidUserAsync(username, password);
        }
        
        public bool IsUserNameFreeForUserId(int userId, string name) {
            return base.Channel.IsUserNameFreeForUserId(userId, name);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserNameFreeForUserIdAsync(int userId, string name) {
            return base.Channel.IsUserNameFreeForUserIdAsync(userId, name);
        }
        
        public bool IsUserNameFree(string name) {
            return base.Channel.IsUserNameFree(name);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserNameFreeAsync(string name) {
            return base.Channel.IsUserNameFreeAsync(name);
        }
        
        public bool IsRoleNameFree(System.Nullable<int> roleId, string name) {
            return base.Channel.IsRoleNameFree(roleId, name);
        }
        
        public System.Threading.Tasks.Task<bool> IsRoleNameFreeAsync(System.Nullable<int> roleId, string name) {
            return base.Channel.IsRoleNameFreeAsync(roleId, name);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EventService.IAdd")]
    public interface IAdd {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdd/AddEvent", ReplyAction="http://tempuri.org/IAdd/AddEventResponse")]
        void AddEvent(string name, System.DateTime date, System.Nullable<int> organizerId, System.Nullable<int> categoryId, string imageUrl, string description, System.Nullable<int> addressId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdd/AddEvent", ReplyAction="http://tempuri.org/IAdd/AddEventResponse")]
        System.Threading.Tasks.Task AddEventAsync(string name, System.DateTime date, System.Nullable<int> organizerId, System.Nullable<int> categoryId, string imageUrl, string description, System.Nullable<int> addressId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdd/AddUser", ReplyAction="http://tempuri.org/IAdd/AddUserResponse")]
        void AddUser(string name, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdd/AddUser", ReplyAction="http://tempuri.org/IAdd/AddUserResponse")]
        System.Threading.Tasks.Task AddUserAsync(string name, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdd/AddRoleToUser", ReplyAction="http://tempuri.org/IAdd/AddRoleToUserResponse")]
        void AddRoleToUser(string userName, int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdd/AddRoleToUser", ReplyAction="http://tempuri.org/IAdd/AddRoleToUserResponse")]
        System.Threading.Tasks.Task AddRoleToUserAsync(string userName, int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdd/AddRole", ReplyAction="http://tempuri.org/IAdd/AddRoleResponse")]
        void AddRole(string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdd/AddRole", ReplyAction="http://tempuri.org/IAdd/AddRoleResponse")]
        System.Threading.Tasks.Task AddRoleAsync(string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdd/AddAddress", ReplyAction="http://tempuri.org/IAdd/AddAddressResponse")]
        void AddAddress(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdd/AddAddress", ReplyAction="http://tempuri.org/IAdd/AddAddressResponse")]
        System.Threading.Tasks.Task AddAddressAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdd/AddCategory", ReplyAction="http://tempuri.org/IAdd/AddCategoryResponse")]
        void AddCategory(string categoryName, System.Nullable<int> pid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdd/AddCategory", ReplyAction="http://tempuri.org/IAdd/AddCategoryResponse")]
        System.Threading.Tasks.Task AddCategoryAsync(string categoryName, System.Nullable<int> pid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdd/AddPhone", ReplyAction="http://tempuri.org/IAdd/AddPhoneResponse")]
        void AddPhone(int userId, string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdd/AddPhone", ReplyAction="http://tempuri.org/IAdd/AddPhoneResponse")]
        System.Threading.Tasks.Task AddPhoneAsync(int userId, string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdd/AddEmail", ReplyAction="http://tempuri.org/IAdd/AddEmailResponse")]
        void AddEmail(int userId, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdd/AddEmail", ReplyAction="http://tempuri.org/IAdd/AddEmailResponse")]
        System.Threading.Tasks.Task AddEmailAsync(int userId, string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAddChannel : EventsListData.EventService.IAdd, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddClient : System.ServiceModel.ClientBase<EventsListData.EventService.IAdd>, EventsListData.EventService.IAdd {
        
        public AddClient() {
        }
        
        public AddClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AddClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AddClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AddClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddEvent(string name, System.DateTime date, System.Nullable<int> organizerId, System.Nullable<int> categoryId, string imageUrl, string description, System.Nullable<int> addressId) {
            base.Channel.AddEvent(name, date, organizerId, categoryId, imageUrl, description, addressId);
        }
        
        public System.Threading.Tasks.Task AddEventAsync(string name, System.DateTime date, System.Nullable<int> organizerId, System.Nullable<int> categoryId, string imageUrl, string description, System.Nullable<int> addressId) {
            return base.Channel.AddEventAsync(name, date, organizerId, categoryId, imageUrl, description, addressId);
        }
        
        public void AddUser(string name, string password, string email) {
            base.Channel.AddUser(name, password, email);
        }
        
        public System.Threading.Tasks.Task AddUserAsync(string name, string password, string email) {
            return base.Channel.AddUserAsync(name, password, email);
        }
        
        public void AddRoleToUser(string userName, int roleId) {
            base.Channel.AddRoleToUser(userName, roleId);
        }
        
        public System.Threading.Tasks.Task AddRoleToUserAsync(string userName, int roleId) {
            return base.Channel.AddRoleToUserAsync(userName, roleId);
        }
        
        public void AddRole(string roleName) {
            base.Channel.AddRole(roleName);
        }
        
        public System.Threading.Tasks.Task AddRoleAsync(string roleName) {
            return base.Channel.AddRoleAsync(roleName);
        }
        
        public void AddAddress(string address) {
            base.Channel.AddAddress(address);
        }
        
        public System.Threading.Tasks.Task AddAddressAsync(string address) {
            return base.Channel.AddAddressAsync(address);
        }
        
        public void AddCategory(string categoryName, System.Nullable<int> pid) {
            base.Channel.AddCategory(categoryName, pid);
        }
        
        public System.Threading.Tasks.Task AddCategoryAsync(string categoryName, System.Nullable<int> pid) {
            return base.Channel.AddCategoryAsync(categoryName, pid);
        }
        
        public void AddPhone(int userId, string phoneNumber) {
            base.Channel.AddPhone(userId, phoneNumber);
        }
        
        public System.Threading.Tasks.Task AddPhoneAsync(int userId, string phoneNumber) {
            return base.Channel.AddPhoneAsync(userId, phoneNumber);
        }
        
        public void AddEmail(int userId, string email) {
            base.Channel.AddEmail(userId, email);
        }
        
        public System.Threading.Tasks.Task AddEmailAsync(int userId, string email) {
            return base.Channel.AddEmailAsync(userId, email);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EventService.IDelete")]
    public interface IDelete {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDelete/DeleteEvent", ReplyAction="http://tempuri.org/IDelete/DeleteEventResponse")]
        void DeleteEvent(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDelete/DeleteEvent", ReplyAction="http://tempuri.org/IDelete/DeleteEventResponse")]
        System.Threading.Tasks.Task DeleteEventAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDelete/DeleteFutureEventByIdAndUserId", ReplyAction="http://tempuri.org/IDelete/DeleteFutureEventByIdAndUserIdResponse")]
        void DeleteFutureEventByIdAndUserId(int eventId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDelete/DeleteFutureEventByIdAndUserId", ReplyAction="http://tempuri.org/IDelete/DeleteFutureEventByIdAndUserIdResponse")]
        System.Threading.Tasks.Task DeleteFutureEventByIdAndUserIdAsync(int eventId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDelete/DeleteUser", ReplyAction="http://tempuri.org/IDelete/DeleteUserResponse")]
        void DeleteUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDelete/DeleteUser", ReplyAction="http://tempuri.org/IDelete/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDelete/DeleteRole", ReplyAction="http://tempuri.org/IDelete/DeleteRoleResponse")]
        void DeleteRole(int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDelete/DeleteRole", ReplyAction="http://tempuri.org/IDelete/DeleteRoleResponse")]
        System.Threading.Tasks.Task DeleteRoleAsync(int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDelete/DeleteUserRole", ReplyAction="http://tempuri.org/IDelete/DeleteUserRoleResponse")]
        void DeleteUserRole(string userName, int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDelete/DeleteUserRole", ReplyAction="http://tempuri.org/IDelete/DeleteUserRoleResponse")]
        System.Threading.Tasks.Task DeleteUserRoleAsync(string userName, int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDelete/DeleteEmailByUserIdAndEmailId", ReplyAction="http://tempuri.org/IDelete/DeleteEmailByUserIdAndEmailIdResponse")]
        void DeleteEmailByUserIdAndEmailId(int userId, int emailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDelete/DeleteEmailByUserIdAndEmailId", ReplyAction="http://tempuri.org/IDelete/DeleteEmailByUserIdAndEmailIdResponse")]
        System.Threading.Tasks.Task DeleteEmailByUserIdAndEmailIdAsync(int userId, int emailId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDelete/DeletePhoneByUserIdAndPhoneId", ReplyAction="http://tempuri.org/IDelete/DeletePhoneByUserIdAndPhoneIdResponse")]
        void DeletePhoneByUserIdAndPhoneId(int userId, int phoneId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDelete/DeletePhoneByUserIdAndPhoneId", ReplyAction="http://tempuri.org/IDelete/DeletePhoneByUserIdAndPhoneIdResponse")]
        System.Threading.Tasks.Task DeletePhoneByUserIdAndPhoneIdAsync(int userId, int phoneId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDelete/DeleteAddress", ReplyAction="http://tempuri.org/IDelete/DeleteAddressResponse")]
        void DeleteAddress(int addressId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDelete/DeleteAddress", ReplyAction="http://tempuri.org/IDelete/DeleteAddressResponse")]
        System.Threading.Tasks.Task DeleteAddressAsync(int addressId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDelete/DeleteCategory", ReplyAction="http://tempuri.org/IDelete/DeleteCategoryResponse")]
        void DeleteCategory(int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDelete/DeleteCategory", ReplyAction="http://tempuri.org/IDelete/DeleteCategoryResponse")]
        System.Threading.Tasks.Task DeleteCategoryAsync(int categoryId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDeleteChannel : EventsListData.EventService.IDelete, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteClient : System.ServiceModel.ClientBase<EventsListData.EventService.IDelete>, EventsListData.EventService.IDelete {
        
        public DeleteClient() {
        }
        
        public DeleteClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DeleteClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeleteClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeleteClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DeleteEvent(int eventId) {
            base.Channel.DeleteEvent(eventId);
        }
        
        public System.Threading.Tasks.Task DeleteEventAsync(int eventId) {
            return base.Channel.DeleteEventAsync(eventId);
        }
        
        public void DeleteFutureEventByIdAndUserId(int eventId, int userId) {
            base.Channel.DeleteFutureEventByIdAndUserId(eventId, userId);
        }
        
        public System.Threading.Tasks.Task DeleteFutureEventByIdAndUserIdAsync(int eventId, int userId) {
            return base.Channel.DeleteFutureEventByIdAndUserIdAsync(eventId, userId);
        }
        
        public void DeleteUser(int userId) {
            base.Channel.DeleteUser(userId);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(int userId) {
            return base.Channel.DeleteUserAsync(userId);
        }
        
        public void DeleteRole(int roleId) {
            base.Channel.DeleteRole(roleId);
        }
        
        public System.Threading.Tasks.Task DeleteRoleAsync(int roleId) {
            return base.Channel.DeleteRoleAsync(roleId);
        }
        
        public void DeleteUserRole(string userName, int roleId) {
            base.Channel.DeleteUserRole(userName, roleId);
        }
        
        public System.Threading.Tasks.Task DeleteUserRoleAsync(string userName, int roleId) {
            return base.Channel.DeleteUserRoleAsync(userName, roleId);
        }
        
        public void DeleteEmailByUserIdAndEmailId(int userId, int emailId) {
            base.Channel.DeleteEmailByUserIdAndEmailId(userId, emailId);
        }
        
        public System.Threading.Tasks.Task DeleteEmailByUserIdAndEmailIdAsync(int userId, int emailId) {
            return base.Channel.DeleteEmailByUserIdAndEmailIdAsync(userId, emailId);
        }
        
        public void DeletePhoneByUserIdAndPhoneId(int userId, int phoneId) {
            base.Channel.DeletePhoneByUserIdAndPhoneId(userId, phoneId);
        }
        
        public System.Threading.Tasks.Task DeletePhoneByUserIdAndPhoneIdAsync(int userId, int phoneId) {
            return base.Channel.DeletePhoneByUserIdAndPhoneIdAsync(userId, phoneId);
        }
        
        public void DeleteAddress(int addressId) {
            base.Channel.DeleteAddress(addressId);
        }
        
        public System.Threading.Tasks.Task DeleteAddressAsync(int addressId) {
            return base.Channel.DeleteAddressAsync(addressId);
        }
        
        public void DeleteCategory(int categoryId) {
            base.Channel.DeleteCategory(categoryId);
        }
        
        public System.Threading.Tasks.Task DeleteCategoryAsync(int categoryId) {
            return base.Channel.DeleteCategoryAsync(categoryId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EventService.IUpdate")]
    public interface IUpdate {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdate/EditEvent", ReplyAction="http://tempuri.org/IUpdate/EditEventResponse")]
        void EditEvent(int eventId, string name, System.DateTime date, System.Nullable<int> categoryId, string imageUrl, string description, System.Nullable<int> addressId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdate/EditEvent", ReplyAction="http://tempuri.org/IUpdate/EditEventResponse")]
        System.Threading.Tasks.Task EditEventAsync(int eventId, string name, System.DateTime date, System.Nullable<int> categoryId, string imageUrl, string description, System.Nullable<int> addressId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdate/EditEventByUserId", ReplyAction="http://tempuri.org/IUpdate/EditEventByUserIdResponse")]
        void EditEventByUserId(int eventId, int userId, string name, System.DateTime date, System.Nullable<int> categoryId, string imageUrl, string description, System.Nullable<int> addressId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdate/EditEventByUserId", ReplyAction="http://tempuri.org/IUpdate/EditEventByUserIdResponse")]
        System.Threading.Tasks.Task EditEventByUserIdAsync(int eventId, int userId, string name, System.DateTime date, System.Nullable<int> categoryId, string imageUrl, string description, System.Nullable<int> addressId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdate/EditUserInfo", ReplyAction="http://tempuri.org/IUpdate/EditUserInfoResponse")]
        void EditUserInfo(int userId, string name, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdate/EditUserInfo", ReplyAction="http://tempuri.org/IUpdate/EditUserInfoResponse")]
        System.Threading.Tasks.Task EditUserInfoAsync(int userId, string name, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdate/EditOrganizerInfo", ReplyAction="http://tempuri.org/IUpdate/EditOrganizerInfoResponse")]
        void EditOrganizerInfo(int userId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdate/EditOrganizerInfo", ReplyAction="http://tempuri.org/IUpdate/EditOrganizerInfoResponse")]
        System.Threading.Tasks.Task EditOrganizerInfoAsync(int userId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdate/EditRole", ReplyAction="http://tempuri.org/IUpdate/EditRoleResponse")]
        void EditRole(int roleId, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdate/EditRole", ReplyAction="http://tempuri.org/IUpdate/EditRoleResponse")]
        System.Threading.Tasks.Task EditRoleAsync(int roleId, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdate/EditAddress", ReplyAction="http://tempuri.org/IUpdate/EditAddressResponse")]
        void EditAddress(int addressId, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdate/EditAddress", ReplyAction="http://tempuri.org/IUpdate/EditAddressResponse")]
        System.Threading.Tasks.Task EditAddressAsync(int addressId, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdate/EditCategory", ReplyAction="http://tempuri.org/IUpdate/EditCategoryResponse")]
        void EditCategory(int categoryId, System.Nullable<int> pid, string categoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdate/EditCategory", ReplyAction="http://tempuri.org/IUpdate/EditCategoryResponse")]
        System.Threading.Tasks.Task EditCategoryAsync(int categoryId, System.Nullable<int> pid, string categoryName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUpdateChannel : EventsListData.EventService.IUpdate, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateClient : System.ServiceModel.ClientBase<EventsListData.EventService.IUpdate>, EventsListData.EventService.IUpdate {
        
        public UpdateClient() {
        }
        
        public UpdateClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UpdateClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UpdateClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UpdateClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void EditEvent(int eventId, string name, System.DateTime date, System.Nullable<int> categoryId, string imageUrl, string description, System.Nullable<int> addressId) {
            base.Channel.EditEvent(eventId, name, date, categoryId, imageUrl, description, addressId);
        }
        
        public System.Threading.Tasks.Task EditEventAsync(int eventId, string name, System.DateTime date, System.Nullable<int> categoryId, string imageUrl, string description, System.Nullable<int> addressId) {
            return base.Channel.EditEventAsync(eventId, name, date, categoryId, imageUrl, description, addressId);
        }
        
        public void EditEventByUserId(int eventId, int userId, string name, System.DateTime date, System.Nullable<int> categoryId, string imageUrl, string description, System.Nullable<int> addressId) {
            base.Channel.EditEventByUserId(eventId, userId, name, date, categoryId, imageUrl, description, addressId);
        }
        
        public System.Threading.Tasks.Task EditEventByUserIdAsync(int eventId, int userId, string name, System.DateTime date, System.Nullable<int> categoryId, string imageUrl, string description, System.Nullable<int> addressId) {
            return base.Channel.EditEventByUserIdAsync(eventId, userId, name, date, categoryId, imageUrl, description, addressId);
        }
        
        public void EditUserInfo(int userId, string name, string password, string email) {
            base.Channel.EditUserInfo(userId, name, password, email);
        }
        
        public System.Threading.Tasks.Task EditUserInfoAsync(int userId, string name, string password, string email) {
            return base.Channel.EditUserInfoAsync(userId, name, password, email);
        }
        
        public void EditOrganizerInfo(int userId, string name) {
            base.Channel.EditOrganizerInfo(userId, name);
        }
        
        public System.Threading.Tasks.Task EditOrganizerInfoAsync(int userId, string name) {
            return base.Channel.EditOrganizerInfoAsync(userId, name);
        }
        
        public void EditRole(int roleId, string roleName) {
            base.Channel.EditRole(roleId, roleName);
        }
        
        public System.Threading.Tasks.Task EditRoleAsync(int roleId, string roleName) {
            return base.Channel.EditRoleAsync(roleId, roleName);
        }
        
        public void EditAddress(int addressId, string address) {
            base.Channel.EditAddress(addressId, address);
        }
        
        public System.Threading.Tasks.Task EditAddressAsync(int addressId, string address) {
            return base.Channel.EditAddressAsync(addressId, address);
        }
        
        public void EditCategory(int categoryId, System.Nullable<int> pid, string categoryName) {
            base.Channel.EditCategory(categoryId, pid, categoryName);
        }
        
        public System.Threading.Tasks.Task EditCategoryAsync(int categoryId, System.Nullable<int> pid, string categoryName) {
            return base.Channel.EditCategoryAsync(categoryId, pid, categoryName);
        }
    }
}
